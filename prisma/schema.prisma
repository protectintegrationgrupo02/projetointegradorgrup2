generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model adms {
  idadms       Int            @id @default(autoincrement())
  nome_empres  String?        @db.VarChar(50)
  cnpj         String?        @db.VarChar(30)
  nome_rua_av  String?        @db.VarChar(30)
  num_end      Int?
  complemento  String?        @db.VarChar(20)
  bairro_end   String?        @db.VarChar(20)
  cep_end      Int?
  id           Int?
  usuarios     usuarios?      @relation(fields: [id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "adms_ibfk_1")
  funcionarios funcionarios[]
  planos       planos[]

  @@index([id], map: "id")
}

model agendamentos {
  idagendametos Int        @id @default(autoincrement())
  tempo         DateTime?  @db.DateTime(0)
  servico       String?    @db.VarChar(25)
  funcionario   String?    @db.VarChar(20)
  form_pague    String?    @db.VarChar(30)
  id            Int?
  usuarios      usuarios?  @relation(fields: [id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "agendamentos_ibfk_1")
  servicos      servicos[]

  @@index([id], map: "id")
}

model funcionarios {
  matricula       Int     @id @default(autoincrement())
  nome_fun        String? @db.VarChar(50)
  telefone_fun    String? @db.VarChar(15)
  cpf_fun         String? @db.VarChar(30)
  nome_rua_av     String? @db.VarChar(20)
  num_end         Int?
  complemento_end String? @db.VarChar(15)
  bairro_end      String? @db.VarChar(15)
  cep_end         Int?
  idadms          Int?
  adms            adms?   @relation(fields: [idadms], references: [idadms], onDelete: Restrict, onUpdate: Restrict, map: "funcionarios_ibfk_1")

  @@index([idadms], map: "idadms")
}

model planos {
  idplanos           Int      @id @default(autoincrement())
  tipo_plano         String?  @db.VarChar(50)
  quant_profissional Int?
  valor_plano        Float?   @db.Float
  list_suport        String?  @db.VarChar(50)
  idadm              Int?
  adms               adms?    @relation(fields: [idadm], references: [idadms], onDelete: Restrict, onUpdate: Restrict, map: "planos_ibfk_1")
  precos             precos[]

  @@index([idadm], map: "idadm")
}

model precos {
  id         Int      @id @default(autoincrement())
  nome_plano String?  @db.VarChar(15)
  valorplano Decimal? @db.Decimal(10, 2)
  desconto   String?  @db.VarChar(10)
  planosid   Int?
  planos     planos?  @relation(fields: [planosid], references: [idplanos], onDelete: Restrict, onUpdate: Restrict, map: "precos_ibfk_1")

  @@index([planosid], map: "planosid")
}

model servicos {
  idservico    Int           @id @default(autoincrement())
  tipo_servico String?       @db.VarChar(50)
  descricao    String?       @db.VarChar(100)
  valor        Float?        @db.Float
  idagendament Int?
  agendamentos agendamentos? @relation(fields: [idagendament], references: [idagendametos], onDelete: Restrict, onUpdate: Restrict, map: "servicos_ibfk_1")

  @@index([idagendament], map: "idagendament")
}

model usuarios {
  id            Int            @id @default(autoincrement())
  nome_completo String?        @db.VarChar(50)
  telefone      String?        @db.VarChar(30)
  cpf_user      String?        @db.VarChar(30)
  email         String?        @db.VarChar(50)
  senha         String?        @db.VarChar(50)
  adms          adms[]
  agendamentos  agendamentos[]
}
